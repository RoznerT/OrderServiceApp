server:
  port: 8082

spring:
  application:
    name: inventory-service
  
  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      group-id: inventory-service-group
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      auto-offset-reset: earliest
      enable-auto-commit: false
      max-poll-records: 100
      properties:
        spring.json.trusted.packages: "*"
        spring.json.value.default.type: com.example.common.events.OrderCreatedEvent
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      retries: 3
      properties:
        spring.json.add.type.headers: false
        
  redis:
    host: ${SPRING_DATA_REDIS_HOST:localhost}
    port: ${SPRING_DATA_REDIS_PORT:6379}
    timeout: ${SPRING_DATA_REDIS_TIMEOUT:5000ms}
    jedis:
      pool:
        max-active: 8
        max-idle: 8
        min-idle: 0
        max-wait: -1ms

---
spring:
  config:
    activate:
      on-profile: docker
  
  kafka:
    bootstrap-servers: kafka:29092
  
  redis:
    host: ${SPRING_DATA_REDIS_HOST:redis}
    port: ${SPRING_DATA_REDIS_PORT:6379}
    timeout: ${SPRING_DATA_REDIS_TIMEOUT:5000ms}

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always

logging:
  level:
    com.example.inventoryservice: DEBUG
    com.example.inventoryservice.service: DEBUG
    com.example.inventoryservice.listener: DEBUG
    com.example.inventoryservice.strategy: DEBUG
    org.springframework.kafka: INFO
    org.springframework.data.redis: INFO
    org.springframework.retry: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"

# Kafka Topic Configuration
kafka:
  topics:
    order-created: order-created
    inventory-check-result: inventory-check-result
  consumer:
    retry:
      attempts: 3
      delay: 1000
      multiplier: 2.0

# Strategy Configuration
inventory:
  strategies:
    digital:
      always-available: true
    perishable:
      expiration-check: true
    standard:
      stock-check: true

# Retry Configuration
retry:
  max-attempts: 3
  initial-delay: 1000
  multiplier: 2.0
  max-delay: 10000 